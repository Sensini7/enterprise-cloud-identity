name: "Terraform: State Unlock"

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Environment to deploy to
        options:
          - sumvita-gov
          - sumvita
          - kalvico
          # - kalvico-gcc 
      LOCK_ID:
        required: true
        type: string
        description: Terraform state lock ID presented in the error message

permissions:
    id-token: write
    contents: read
    
env:
  ARM_USE_AZUREAD: true
  ARM_ENVIRONMENT: ${{ vars.TF_BACKEND_CONFIG_ENVIRONMENT }}

  TF_VAR_ci_environment_name: ${{ inputs.environment }}
  MANAGEMENT_TENANT_TENANT_ID: ${{ vars.IS_AZURE_GOV == 'true' && vars.US_MANAGEMENT_TENANT_ID || vars.COMMERCIAL_MANAGEMENT_TENANT_ID}}
  
  AWS_REGION: ${{ vars.TFSTATE_REGION }}
  AWS_ROLE_ARN: ${{ vars.TFSTATE_ROLE_ARN }}

  ## tfvars file path vars 
  TFVARS_FOLDER: "${{ inputs.tfvars_folder || './tfvars/' }}"
  TFVARS_TENANT_FILE: "${{ inputs.environment || vars.MANAGEMENT_TENANT_NAME_GOV }}.tfvars"  
  TFVARS_COMMON_FILE: "common.tfvars"  

jobs:
  alert-upon-prod-deployment:
    if: ${{ inputs.environment == 'PROD' }}
    uses: ./.github/workflows/prod-deployment-alerts.yml
    with:
      environment: ${{ inputs.environment || vars.MANAGEMENT_TENANT_NAME_GOV }}
    secrets: inherit

  terraform-state-rm:
    ## Only GitHub users in the ALLOWED_MANUAL_DEPLOYERS list can trigger this workflow
    if: contains(vars.ALLOWED_MANUAL_DEPLOYERS, github.actor)
    environment: ${{ inputs.environment }}
    name: "Terraform State Unlock"
    runs-on: ubuntu-latest

    steps:
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.TFSTATE_ROLE_ARN }}
          aws-region: ${{ vars.TFSTATE_REGION }}

      - name: Authenticate and set Graph Access Token
        shell: pwsh
        run: |
          if ("${{ vars.IS_AZURE_GOV }}" -eq "true") {
            az cloud set --name AzureUSGovernment
          }
          az login --service-principal -u ${{ vars.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ vars.AZURE_TENANT_ID }}
          $AccessToken = (az account get-access-token --resource-type ms-graph | ConvertFrom-Json).accessToken

      - name: Checkout
        uses: actions/checkout@v4
            
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Add ssh key to ssh-agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ${{ startsWith(inputs.environment, 'sumvita') && '.' || format('customers/{0}', inputs.environment) }}
        run: |
          terraform init --backend-config='bucket=${{ vars.TFSTATE_S3_BUCKET }}' \
                          --backend-config='key=${{ vars.TFSTATE_KEY }}' \
                          --backend-config='dynamodb_table=${{ vars.TFSTATE_DYNAMODB_TABLE }}' \
                          --backend-config='encrypt=true'

      - name: State unlock
        working-directory: ${{ startsWith(inputs.environment, 'sumvita') && '.' || format('customers/{0}', inputs.environment) }}
        run: |
          terraform force-unlock -force ${{ inputs.LOCK_ID }}