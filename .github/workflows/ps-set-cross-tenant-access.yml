name: "Entra: Set Cross Tenant Access Policy" 

on:
  # Add PR Trigger: https://github.com/orgs/EasyDynamics/projects/28?pane=issue&itemId=85661185&issue=EasyDynamics%7Centerprise-cloud-identity%7C346
  # pull_request:
  #   types: [opened, synchronize, reopened]
  #   paths:
  #     - '.github/workflows/ps-set-cross-tenant-access.yml'
  workflow_dispatch:
    inputs:
      deploy-tenant:
        required: true
        type: choice
        options:
          - sumvita-gov
          - sumvita
      target-tenants:
        required: true
        type: string
        description: List of tenants which the cross tenant access policy applies to
      direction:
        required: true
        type: choice
        description: Specify which access policy to configure
        options:
          - inbound
          - outbound
      block-all:
        required: true
        type: boolean
        description: Block all applications
      allowed-apps:
        required: false
        type: string
        description: List of allowed applications for access policy

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  IS_AZURE_GOV: "${{ vars.IS_AZURE_GOV }}"
  ExecuteChange: "${{ inputs.execute || 'false'}}"
  GOV_TENANT_LIST: ${{ vars.GOV_TENANT_LIST }}
  COMM_TENANT_LIST: ${{ vars.COMM_TENANT_LIST }}

  DEPLOY_TENANT: "${{ vars.DEPLOY_TENANT }}"
  TARGET_TENANTS: "${{ vars.AZURE_TARGET_TENANTS }}"
  DIRECTION: ${{ inputs.direction }}
  BLOCK_ALL: ${{ inputs.block-all }}
  ALLOWED_APPS: ${{ inputs.allowed-apps }}

jobs: 
  alert-upon-prod-deployment:
    if: ${{ inputs.environment == 'PROD' }}
    uses: ./.github/workflows/prod-deployment-alerts.yml
    with:
      environment: ${{ inputs.environment || vars.MANAGEMENT_TENANT_NAME_GOV }}
    secrets: inherit

  set-cross-tenant-access-gov:
    environment: "${{ vars.DEFAULT_GOV_TENANT }}"
    name: "Gov - Set Cross Tenant Synchronization"
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'EasyDynamics/EntraID-800-53-Terraform-Modules'
          ref: '0.0.107'
          sparse-checkout: 'powershell-modules/EZD.ECI.CrossTenantAccess'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

      - name: Checkout common module
        uses: actions/checkout@v4
        with:
          repository: 'EasyDynamics/EntraID-800-53-Terraform-Modules'
          ref: '0.0.117'
          path: 'EZD.ECI.Common'
          sparse-checkout: 'powershell-modules/EZD.ECI.Common'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

      - name: Setup Cross Tenant Access Policy
        shell: pwsh
        run: |
          # Install required modules 
          Install-Module Microsoft.Graph.Authentication -Force
          Install-Module Microsoft.Graph.Identity.SignIns -Force
          
          # Install and import modules
          Import-Module .\EZD.ECI.Common\powershell-modules\EZD.ECI.Common\EZD.ECI.Common.psd1 -Force
          
          Connect-EciGraph
          Import-Module .\powershell-modules\EZD.ECI.CrossTenantAccess\EZD.ECI.CrossTenantAccess.psd1 -Force

          $TargetTenant = $env:TARGET_TENANTS -split ','
          $TargetTenantSet = [System.Collections.Generic.HashSet[string]]::new($TargetTenant)

          if ($env:GOV_TENANT_LIST) {
            $GovLib = ConvertTo-HashTable ($env:GOV_TENANT_LIST | ConvertFrom-Json -Depth 10)
          } else {
            Write-Host "Environment variable GOV_TENANT_LIST is not set."
          }

          if ($env:COMM_TENANT_LIST) {
            $CommLib = ConvertTo-HashTable ($env:COMM_TENANT_LIST | ConvertFrom-Json -Depth 10)
          } else {
            Write-Host "Environment variable COMM_TENANT_LIST is not set."
          }

          # Get tenant id for tenant to deploy to
          if ($CommLib.ContainsKey($env:DEPLOY_TENANT)) {
            $DeployTenantId = $($CommLib[$env:DEPLOY_TENANT])
          } elseif ($GovLib.ContainsKey($env:DEPLOY_TENANT)){
            $DeployTenantId = $($GovLib[$env:DEPLOY_TENANT])
          } else {
            $DeployTenantId = "Not Found" 
          }
          Write-Host "Deploy Tenant Id: $DeployTenantId"

          if ($env:DIRECTION -eq "inbound"){
            $Direction = "outbound"
          } else {
            $Direction = "inbound"
          }

          foreach ($Tenant in $GovLib.Keys) {
            if ($TargetTenantSet.Contains($Tenant)) {
              $env:AZURE_TENANT_ID = $($GovLib[$Tenant])

              Disconnect-MgGraph
              Connect-EciGraph

              Write-Output "Calling New-CrossTenantSynchronization now..."
              if ($env:BLOCK_ALL -eq "true") {
                New-CrossTenantSynchronization `
                  -TargetTenants $DeployTenantId `
                  -Direction $Direction `
                  -BlockAll
              } else {
                New-CrossTenantSynchronization `
                  -TargetTenants $DeployTenantId `
                  -Direction $Direction `
                  -AllowedApps $env:ALLOWED_APPS `
              }
            }
          }

  set-cross-tenant-access-comm:
    environment: "${{ vars.DEFAULT_COMM_TENANT }}"
    name: "Comm - Set Cross Tenant Synchronization"
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'EasyDynamics/EntraID-800-53-Terraform-Modules'
          ref: '0.0.107'
          sparse-checkout: 'powershell-modules/EZD.ECI.CrossTenantAccess'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

      - name: Checkout common module
        uses: actions/checkout@v4
        with:
          repository: 'EasyDynamics/EntraID-800-53-Terraform-Modules'
          ref: '0.0.117'
          path: 'EZD.ECI.Common'
          sparse-checkout: 'powershell-modules/EZD.ECI.Common'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

      - name: Setup Cross Tenant Access Policy
        shell: pwsh
        run: |
          # Install required modules 
          Install-Module Microsoft.Graph.Authentication -Force
          Install-Module Microsoft.Graph.Identity.SignIns -Force
          
          # Install and import modules
          Import-Module .\EZD.ECI.Common\powershell-modules\EZD.ECI.Common\EZD.ECI.Common.psd1 -Force
          
          Connect-EciGraph
          Import-Module .\powershell-modules\EZD.ECI.CrossTenantAccess\EZD.ECI.CrossTenantAccess.psd1 -Force

          $TargetTenant = $env:TARGET_TENANTS -split ','
          $TargetTenantSet = [System.Collections.Generic.HashSet[string]]::new($TargetTenant)

          if ($env:GOV_TENANT_LIST) {
            $GovLib = ConvertTo-HashTable ($env:GOV_TENANT_LIST | ConvertFrom-Json -Depth 10)
          } else {
            Write-Host "Environment variable GOV_TENANT_LIST is not set."
          }

          if ($env:COMM_TENANT_LIST) {
            $CommLib = ConvertTo-HashTable ($env:COMM_TENANT_LIST | ConvertFrom-Json -Depth 10)
          } else {
            Write-Host "Environment variable COMM_TENANT_LIST is not set."
          }

          # Get tenant id for tenant to deploy to
          if ($CommLib.ContainsKey($env:DEPLOY_TENANT)) {
            $DeployTenantId = $($CommLib[$env:DEPLOY_TENANT])
          } elseif ($GovLib.ContainsKey($env:DEPLOY_TENANT)){
            $DeployTenantId = $($GovLib[$env:DEPLOY_TENANT])
          } else {
            $DeployTenantId = "Not Found" 
          }
          Write-Host "Deploy Tenant Id: $DeployTenantId"

          if ($env:DIRECTION -eq "inbound"){
            $Direction = "outbound"
          } else {
            $Direction = "inbound"
          }

          foreach ($Tenant in $CommLib.Keys) {
            if ($TargetTenantSet.Contains($Tenant)) {
              $env:AZURE_TENANT_ID = $($CommLib[$Tenant])

              Disconnect-MgGraph
              Connect-EciGraph

              Write-Output "Calling New-CrossTenantSynchronization now..."
              if ($env:BLOCK_ALL -eq "true") {
                New-CrossTenantSynchronization `
                  -TargetTenants $DeployTenantId `
                  -Direction $Direction `
                  -BlockAll
              } else {
                New-CrossTenantSynchronization `
                  -TargetTenants $DeployTenantId `
                  -Direction $Direction `
                  -AllowedApps $env:ALLOWED_APPS `
              }
            }
          }

  set-cross-tenant-access-management:
    environment: "${{ vars.DEPLOY_TENANT }}"
    name: "Mgmt - Set Cross Tenant Synchronization"
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'EasyDynamics/EntraID-800-53-Terraform-Modules'
          ref: '0.0.107'
          sparse-checkout: 'powershell-modules/EZD.ECI.CrossTenantAccess'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}
          
      - name: Checkout common module
        uses: actions/checkout@v4
        with:
          repository: 'EasyDynamics/EntraID-800-53-Terraform-Modules'
          ref: '0.0.117'
          path: 'EZD.ECI.Common'
          sparse-checkout: 'powershell-modules/EZD.ECI.Common'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

      - name: Setup Cross Tenant Access Policy
        shell: pwsh
        run: |
          # Install required modules 
          Install-Module Microsoft.Graph.Authentication -Force
          Install-Module Microsoft.Graph.Identity.SignIns -Force
          
          # Install and import modules
          Import-Module .\EZD.ECI.Common\powershell-modules\EZD.ECI.Common\EZD.ECI.Common.psd1 -Force
          
          Connect-EciGraph
          Import-Module .\powershell-modules\EZD.ECI.CrossTenantAccess\EZD.ECI.CrossTenantAccess.psd1 -Force

          if ($env:GOV_TENANT_LIST) {
            $GovLib = ConvertTo-HashTable ($env:GOV_TENANT_LIST | ConvertFrom-Json -Depth 10)
          } else {
            Write-Host "Environment variable GOV_TENANT_LIST is not set."
          }

          if ($env:COMM_TENANT_LIST) {
            $CommLib = ConvertTo-HashTable ($env:COMM_TENANT_LIST | ConvertFrom-Json -Depth 10)
          } else {
            Write-Host "Environment variable COMM_TENANT_LIST is not set."
          }

          # Get tenant id for tenant to deploy to
          if ($CommLib.ContainsKey($env:DEPLOY_TENANT)) {
            $DeployTenantId = $($CommLib[$env:DEPLOY_TENANT])
          } elseif ($GovLib.ContainsKey($env:DEPLOY_TENANT)){
            $DeployTenantId = $($GovLib[$env:DEPLOY_TENANT])
          } else {
            $DeployTenantId = "Not Found" 
          }
          Write-Host "Deploy Tenant Id: $DeployTenantId"

          # Create an array for tenant ids to apply policy to
          $TargetTenant = $env:TARGET_TENANTS -split ','
          $TargetTenantIds = ""

          foreach($Tenant in $TargetTenant){
            $CurrTenant = $($CommLib[$Tenant])
            if (!$CurrTenant) {
              $CurrTenant = $($GovLib[$Tenant])
            }
            $TargetTenantIds += $CurrTenant + ","
          }

          # Trim the trailing comma
          $TargetTenantIds = $TargetTenantIds.TrimEnd(',')
          Write-Output "Target Tenant Ids: $TargetTenantIds"

          $env:AZURE_TENANT_ID = $DeployTenantId

          Disconnect-MgGraph
          Connect-EciGraph

          Write-Output "Calling New-CrossTenantSynchronization now..."
          if ($env:BLOCK_ALL -eq "true") {
            New-CrossTenantSynchronization `
              -TargetTenants $TargetTenantIds `
              -Direction $env:DIRECTION `
              -BlockAll
          } else {
            New-CrossTenantSynchronization `
              -TargetTenants $TargetTenantIds `
              -Direction $env:DIRECTION `
              -AllowedApps $env:ALLOWED_APPS `
          }