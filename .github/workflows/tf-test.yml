name: 'Terraform: Continuous Integration'

on:
  ## This suppression will be removed once branch-driven Workflows have been completed
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Environment to deploy to
        options:
          - sumvita-gov
          - sumvita
          - sumvita-gov
      tflint_version:
        required: true
        type: string
        description: Version of TFLint to install
        default: 'v0.55.0'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
    paths:
      - '*.tf'
      - 'customers/*/*.tf'
      - '.github/workflows/*.yml'
      
permissions:
  security-events: write # Needed to upload-sarif
  contents: read # Needed to clone repo
  actions: read # Potentially needed for private repositories (see https://github.com/github/codeql-action/issues/2117)
env: 
  TFLINT_VERSION: ${{ inputs.tflint_version || 'v0.55.0'}}
jobs:
  terraform-unit-tests:
    environment: ${{ inputs.environment }}
    name: 'Terraform Unit Tests'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Add TFLint functionality to check for unused variables
    - uses: terraform-linters/setup-tflint@v4
      name: Setup TFLint
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}
        
    - name: Run TFLint for unused variables
      run: tflint --enable-rule=terraform_unused_declarations --recursive

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Add ssh key to ssh-agent
      # Supports fetching the packages. Not just the package.json git refs of legacy, but onerail scripts pulling packages.
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=false

    # Validate terraform files
    - name: Terraform Validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Perform a security scan of the terraform code using checkov
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        config_file: .checkov.yaml
        enable_secrets_scan_all_files: true

    # Upload results to GitHub Advanced Security
    # - name: Upload SARIF file
    #   if: success() || failure()
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: results.sarif
    #     category: checkov